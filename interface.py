# -*- coding: utf-8 -*-
"""flask_interface.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lbRS69D6xrxEwr-lTjoYFXjQBkqyVQVO
"""

!pip install flask-ngrok

!pip install pyngrok

from flask import Flask, render_template, request, jsonify
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import torch
import numpy as np
import os
from pyngrok import ngrok
from flask_ngrok import run_with_ngrok

# Initialize Flask app
app = Flask(__name__)
run_with_ngrok(app)  # Starts ngrok when running the app

# Load pre-trained model and tokenizer
MODEL_NAME = "bareeraqrsh/Sentiment-analysis-tool"  # Replace with your model path if custom
model = AutoModelForSequenceClassification.from_pretrained(MODEL_NAME, num_labels=3)
tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)

# Define class labels (adjust to match your dataset)
LABELS = ["Negative", "Neutral", "Positive"]

@app.route('/', methods=['GET', 'POST'])
def home():
    prediction = None
    confidence = None
    text = None
    batch_results = []

    if request.method == 'POST':
        # Check if a file is uploaded
        if 'file' in request.files and request.files['file']:
            uploaded_file = request.files['file']
            if uploaded_file.filename.endswith('.txt') or uploaded_file.filename.endswith('.csv'):
                # Read the uploaded file
                content = uploaded_file.read().decode('utf-8')
                texts = content.splitlines()  # Split into lines for batch processing

                # Analyze each line of text
                for line in texts:
                    if line.strip():  # Skip empty lines
                        inputs = tokenizer(line, return_tensors="pt", padding=True, truncation=True, max_length=512)
                        with torch.no_grad():
                            outputs = model(**inputs)
                            logits = outputs.logits
                            probabilities = torch.softmax(logits, dim=-1).numpy().flatten()
                            predicted_label = LABELS[np.argmax(probabilities)]
                            confidence = probabilities[np.argmax(probabilities)]
                        batch_results.append((line, predicted_label, round(confidence, 2)))
            else:
                return render_template_string("""
                <p class="error">Please upload a valid .txt or .csv file.</p>
                """)
        else:
            # Handle text input from the textarea
            text = request.form.get('text')
            if text:
                inputs = tokenizer(text, return_tensors="pt", padding=True, truncation=True, max_length=512)
                with torch.no_grad():
                    outputs = model(**inputs)
                    logits = outputs.logits
                    probabilities = torch.softmax(logits, dim=-1).numpy().flatten()
                predicted_label = LABELS[np.argmax(probabilities)]
                confidence = probabilities[np.argmax(probabilities)]
                prediction = f"Prediction: {predicted_label}, Confidence: {confidence:.2f}"

    return render_template_string("""
    <!doctype html>
    <html lang="en">
    <head>
        <title>Sentiment Analysis Tool</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    </head>
    <body>
        <nav class="navbar navbar-expand-lg bg-body-tertiary">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Sentiment Analysis</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
              <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
              <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                  <a class="nav-link active" aria-current="page" href="#">Home</a>
                </li>
                <li class="nav-item">
                  <a class="nav-link" href="#">Link</a>
                </li>
                <li class="nav-item dropdown">
                  <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                    Dropdown
                  </a>
                  <ul class="dropdown-menu">
                    <li><a class="dropdown-item" href="#">Action</a></li>
                    <li><a class="dropdown-item" href="#">Another action</a></li>
                    <li><hr class="dropdown-divider"></li>
                    <li><a class="dropdown-item" href="#">Something else here</a></li>
                  </ul>
                </li>
                <li class="nav-item">
                  <a class="nav-link disabled" aria-disabled="true">Disabled</a>
                </li>
              </ul>
            </div>
          </div>
        </nav>

        <div class="container mt-4">
            <h1>Sentiment Analysis Tool</h1>
            <form action="/" method="post" enctype="multipart/form-data">
                <textarea name="text" placeholder="Enter your text here" rows="5" class="form-control">{{ text or '' }}</textarea>
                <br>
                <input type="file" name="file" class="form-control">
                <br>
                <button type="submit" class="btn btn-primary">Analyze</button>
            </form>
            {% if prediction %}
                <div class="alert alert-success mt-3">{{ prediction }}</div>
            {% endif %}
            {% if batch_results %}
                <h2>Batch Results:</h2>
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Text</th>
                            <th>Prediction</th>
                            <th>Confidence</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for line, pred, conf in batch_results %}
                        <tr>
                            <td>{{ line }}</td>
                            <td>{{ pred }}</td>
                            <td>{{ conf }}</td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            {% endif %}
        </div>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    </body>
    </html>
    """, text=text, prediction=prediction, batch_results=batch_results)

@app.route('/', methods=['GET', 'POST'])
def home():
    prediction = None
    confidence = None
    text = None

    if request.method == 'POST':
        text = request.form.get('text')
        if text:
            # Tokenize input text
            inputs = tokenizer(text, return_tensors="pt", padding=True, truncation=True, max_length=512)

            # Perform prediction
            with torch.no_grad():
                outputs = model(**inputs)
                logits = outputs.logits
                probabilities = torch.softmax(logits, dim=-1).numpy().flatten()

            # Convert float32 to regular float for JSON serialization
            probabilities = probabilities.astype(float)  # Convert numpy float32 to float

            # Get predicted label and confidence
            predicted_label = LABELS[np.argmax(probabilities)]
            confidence = probabilities[np.argmax(probabilities)]

            prediction = f"Prediction: {predicted_label}, Confidence: {confidence:.2f}"

    # HTML page with inline styling
    return render_template_string("""
    <!doctype html>
    <html lang="en">
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Sentiment Analysis Tool</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
        <style>
            body {
                font-family: Arial, sans-serif;
                background-color: #f4f4f9;
                margin: 0;
                padding: 0;
            }
            .container {
                width: 90%;
                margin: 50px auto;
                background-color: #fff;
                padding: 20px;
                border-radius: 10px;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            }
            h1 {
                text-align: center;
                color: #333;
            }
            textarea {
                width: 100%;
                padding: 10px;
                padding_right: 10px;
                font-size: 16px;
                border: 1px solid #ccc;
                border-radius: 5px;
                resize: vertical;
            }
            button {
                display: block;
                width: 100%;
                padding: 10px;
                background-color: #007BFF;
                color: white;
                border: none;
                border-radius: 5px;
                font-size: 18px;
                cursor: pointer;
            }
            button:hover {
                background-color: #0056b3;
            }
            .result {
                margin-top: 20px;
                padding: 10px;
                background-color: #e9ecef;
                border-radius: 5px;
                font-size: 18px;
            }
            .error {
                color: red;
                font-weight: bold;
            }
        </style>
     </head>
     <body>
        <nav class="navbar navbar-expand-lg bg-body-tertiary">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Sentiment Analysis</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
              <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
              <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                  <a class="nav-link active" aria-current="page" href="#">Home</a>
                </li>
                <li class="nav-item">
                  <a class="nav-link" href="#">Link</a>
                </li>
                <li class="nav-item dropdown">
                  <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                    Dropdown
                  </a>
                  <ul class="dropdown-menu">
                    <li><a class="dropdown-item" href="#">Action</a></li>
                    <li><a class="dropdown-item" href="#">Another action</a></li>
                    <li><hr class="dropdown-divider"></li>
                    <li><a class="dropdown-item" href="#">Something else here</a></li>
                  </ul>
                </li>
                <li class="nav-item">
                  <a class="nav-link disabled" aria-disabled="true">Disabled</a>
                </li>
              </ul>
            </div>
          </div>
        </nav>

        <div class="container">
            <h1>Sentiment Analysis Tool</h1>
            <form action="/" method="post">
                <textarea name="text" placeholder="Enter your text here" rows="5" cols="50">{{ text or '' }}</textarea><br><br>
                <button type="submit">Analyze Sentiment</button>
            </form>

            {% if prediction %}
                <div class="result">
                    <p>{{ prediction }}</p>
                </div>
            {% endif %}
            {% if not text and request.method == 'POST' %}
                <div class="error">Please enter some text to analyze.</div>
            {% endif %}
        </div>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    </body>
    </html>
    """, text=text, prediction=prediction)

from huggingface_hub import notebook_login
notebook_login()

# Set your Hugging Face token
os.environ["HF_TOKEN"] = "your_access_token_here"

# Set your ngrok auth token
ngrok.set_auth_token("set_your_Authorisation_token_here")

from flask import render_template_string

if __name__ == "__main__":
    public_url = ngrok.connect(5000)
    print(f"Public URL: {public_url}")
    app.run()
